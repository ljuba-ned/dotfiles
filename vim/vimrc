execute pathogen#infect()
call pathogen#helptags()
syntax on
" highlight all search matches
" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" set line numbers
set number

filetype plugin indent on

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
"" autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
"" au InsertLeave * match ExtraWhitespace /\s\+$/

" show and format status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l}

" set theme for airline, comment it out to let plugin chose theme
" based upon currently selected color scheme
" let g:airline_theme='luna'
let g:airline_theme='silver'

" GUI font
if has("mac") || has("macunix")
    set gfn=Source\ Code\ Pro\ Light:h13,Menlo:h13
endif

" GUI window
if has("gui_running")
    set lines=30 columns=90
    colorscheme monokai
endif

" colorscheme based on time of the day
" colorscheme solarized
" if strftime("%H") > 18
"     set background=dark
" elseif strftime("%H") < 7
"    set background=dark
" else
"    set background=light
" endif

" tab related
" set tab to 4 spaces
set tabstop=4
" replace tab with spaces
set expandtab
set shiftwidth=4
set softtabstop=4
set shiftround

" map leader to comma instead of backslash
let mapleader = ","

" disable swap and backup files
set nobackup       " no backup files
set nowritebackup  " only in case you don't want a backup file while editing
set noswapfile     " no swap files
set guioptions-=T  " no toolbar
set guioptions-=r  " no scrollbar
" hide toolbar and meny bar in gvim/mvim
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar

" disable default key binding for online thesaurus
let g:online_thesaurus_map_keys = 0
" new key mapping for online thesaurus
nnoremap <leader>ot :OnlineThesaurusCurrentWord<CR>

" associate *.md to markdown instead to modula2
autocmd BufNewFile,BufRead *.md set filetype=markdown

" syntastic, static syntax checker
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" On by default, turn it off for html and on for python
let g:syntastic_mode_map = { 'mode': 'active',
    \ 'active_filetypes': ['py'],
    \ 'passive_filetypes': ['html'] }

" Use flake8
let g:syntastic_python_checkers = ['flake8']
"" let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801"'
let g:syntastic_python_flake8_args = '--ignore="W391"'


" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Settings for ctrlp
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*


" Settings for jedi-vim
" cd ~/.vim/bundle
" git clone git://github.com/davidhalter/jedi-vim.git
let g:jedi#usages_command = "<leader>z"
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction

inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>

let base16colorspace=256

" disable arrow keys in excape mode
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>
" map <right> :echoerr "Stop being stupid"<CR>
" disable arrow keys in insert mode
" imap <up> <nop>
" imap <down> <nop>
" imap <left> <nop>
" imap <right> <nop>
